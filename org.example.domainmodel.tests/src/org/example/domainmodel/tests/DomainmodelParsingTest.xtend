/*
 * generated by Xtext 2.16.0-SNAPSHOT
 */
package org.example.domainmodel.tests

import com.google.inject.Inject
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.eclipse.xtext.testing.util.ParseHelper
import org.eclipse.xtext.testing.validation.ValidationTestHelper
import org.example.domainmodel.domainmodel.Domainmodel
import org.example.domainmodel.tests.utils.UMLResourceSetHelper
import org.junit.Before
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(DomainmodelInjectorProvider)
class DomainmodelParsingTest {

	@Inject extension ParseHelper<Domainmodel>
	@Inject extension ValidationTestHelper
	@Inject extension UMLResourceSetHelper

	@Before def setup() {
		initializeResourceSet
	}

	@Test def load_model() {
		'''
			datatype String
			
			entity Blog {
				title: String
				many posts: Post
			}
			
			entity HasAuthor {
				author: String
			}
			
			entity Post extends HasAuthor {
				title: String
				content: String
				many comments: Comment
			}
			
			entity Comment extends HasAuthor {
				content: String
			}
		'''.parse.assertNoErrors
	}

	@Test def load_model_with_uml_references() {
		'''
			entity UML {
				a : test.A
				b : test.B
			}
		'''.hasNoErrors
	}

	private def hasNoErrors(CharSequence text) {
		text.parse(resourceSet).assertNoErrors
	}
}
